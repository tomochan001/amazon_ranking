#!/usr/bin/ruby
# coding: utf-8

# カニバリズム実態調査
# ver.1 (2014/6/15)
# amaran（http://www.rankbank.net/amaran/rank/）のランキング情報を使って、紙と電子本のベストセラーがどれだけ重複しているかを調査する
# メモ。URLは以下のようになる。
# http://www.rankbank.net/amaran/rank/?date=14020100&cat=book&page=0
# ページは0が1〜100位まで、1が101〜200位まで、2が201位〜300位まで
# dateはYYMMDDTT。今回、TTは固定にする（00）。
# とりあえず、2012年11月1日から2014年5月30日まで

require "rubygems"
require "nokogiri"
require "open-uri"
require "cgi"

# 変数
base_url = "http://www.rankbank.net/amaran/rank/" 

target_date = []

# year2012
target_date = %w

page_number = 0..2

$match_expression = %r!<td class="rank"><a href="\.\./history/\?date=\d{8}&cat=book&asin=(\w{10})" class="rank" title="(.+?)">(\d+?)</a></td>!
$unmatch_expression = %r!<td class="rank"><a href="\.\./help/#(rank)" class="rank" title="(.+?)">(.+?)</a></td>!

# 結果をファイル保存　配列を受け取って、一行に一本のリストとして保存
def hozon(hairetsu)
      output_filename = "amaran_kekka.txt" #検索結果を保存するファイル名を指定
      open(output_filename, "a") do |op| #検索結果を保存する
          op.puts(hairetsu.join("\n"))
      end
      p "検索結果をファイルに保存しました"
end
  

# 解析ルーチン
def kaiseki(doc, date)
    seikai = []
    fuseikai = []
    results = []
    ichihon_result = []
    seikai = doc.scan($match_expression)
    p seikai.length
    seikai.each do |s|
        ichihon_result = []
        ichihon_result[3] = s[0] #ASIN
        ichihon_result[2] = s[1] #TITLE
        ichihon_result[1] = s[2] #RANK
        ichihon_result[0] = date
        # p ichihon_result
        results << ichihon_result.join("\t")
    end
    fuseikai = doc.scan($unmatch_expression)
    p fuseikai.length
    fuseikai.each do |s|
        ichihon_result = []
        ichihon_result[3] = "ASIN_UNKNOWN" #ASIN
        ichihon_result[2] = "TITLE_UNKNOWN" #TITLE
        ichihon_result[1] = s[2] #RANK
        ichihon_result[0] = date
        results << ichihon_result.join("\t")
    end
    # p results
    return results
end

# 処理本体
target_date.each do |date|
    result_per_page =[]
    
    date_number = date.to_s
    bunkatsu_year = date.slice(/^\d\d?/)
    bunkatsu_month = date.slice(/\d\d(\d\d)/, 1)
    bunkatsu_date = date.slice(/\d\d\d\d(\d\d)/, 1)
    puts("20#{bunkatsu_year}年の#{bunkatsu_month}月#{bunkatsu_date}日の処理を開始します")
  
  page_number.each do |page|
    page_no = (page + 1).to_s
    puts("#{page_no}ページ目の解析を開始します。")
    complete_url = base_url + "?date=" + date_number + "&cat=book&page=" + page.to_s
    doc = open(complete_url).read
    # p doc
    kekka = kaiseki(doc, date_number)
    # p kekka
    result_per_page << kekka
    puts("#{page_no}ページ目の解析を終了しました。")
    # result_per_page
  end
  hozon(result_per_page)
end

# 終了
